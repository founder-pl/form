#!/usr/bin/env node

/**
 * Script to process LLM responses for country tax and benefit data
 * 
 * This script processes JSON responses from an LLM that was given the prompts
 * generated by generate-country-prompts.js. It converts the responses into
 * the format expected by the application and saves them to the appropriate
 * data files.
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const readdir = promisify(fs.readdir);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

// Input and output directories
const INPUT_DIR = path.join(__dirname, '../prompts');
const OUTPUT_DIR = path.join(__dirname, '../data');

// Ensure output directory exists
if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// Template for the countries data file
const COUNTRIES_TEMPLATE = {
    // This will be populated with country data
};

// Template for the benefits data file
const BENEFITS_TEMPLATE = {
    // This will be populated with benefit data
};

/**
 * Process a single country's response file
 * @param {string} filePath - Path to the response file
 * @returns {Promise<Object>} Processed country data
 */
async function processCountryResponse(filePath) {
    try {
        const content = await readFile(filePath, 'utf8');
        const data = JSON.parse(content);
        
        // Extract relevant information for the countries.json file
        const countryData = {
            name: data.name,
            flag: data.flag,
            eu: data.euMember || false,
            currency: data.currency,
            taxYear: data.taxYear,
            taxResidencyRules: data.taxResidencyRules,
            taxRates: data.taxRates,
            vat: data.vat?.standardRate || 0,
            vatRates: data.vat?.reducedRates || [],
            socialSecurity: data.socialSecurity,
            healthInsurance: data.healthInsurance,
            pensionSystem: data.pensionSystem,
            unemploymentBenefits: data.unemploymentBenefits,
            taxFiling: data.taxFiling,
            specialRegimes: data.specialRegimes,
            digitalNomadVisa: data.digitalNomadVisa,
            notes: data.notes,
            sources: data.sources,
            lastUpdated: data.lastUpdated || new Date().toISOString().split('T')[0]
        };
        
        // Extract relevant information for the benefits.json file
        const benefitData = {
            countryCode: data.countryCode,
            familyBenefits: data.familyBenefits,
            socialWelfare: data.socialWelfare,
            educationBenefits: data.educationBenefits,
            healthcareBenefits: data.healthcareBenefits,
            taxCredits: data.taxCredits,
            specialPrograms: data.specialPrograms,
            notes: data.notes,
            sources: data.sources,
            lastUpdated: data.lastUpdated || new Date().toISOString().split('T')[0]
        };
        
        return {
            countryData,
            benefitData
        };
    } catch (error) {
        console.error(`Error processing file ${filePath}:`, error.message);
        return null;
    }
}

/**
 * Process all response files in a directory
 */
async function processAllResponses() {
    console.log('Processing LLM responses...');
    
    const countriesData = { ...COUNTRIES_TEMPLATE };
    const benefitsData = { ...BENEFITS_TEMPLATE };
    let processedCount = 0;
    let errorCount = 0;
    
    try {
        // Get list of country directories
        const countryDirs = (await readdir(INPUT_DIR, { withFileTypes: true }))
            .filter(dirent => dirent.isDirectory())
            .map(dirent => dirent.name);
        
        console.log(`Found ${countryDirs.length} country directories`);
        
        // Process each country directory
        for (const countryCode of countryDirs) {
            const countryDir = path.join(INPUT_DIR, countryCode);
            const files = await readdir(countryDir);
            
            // Look for response files (should be named *_response.json)
            const responseFiles = files.filter(file => 
                file.endsWith('_response.json') || 
                (file.endsWith('.json') && !file.includes('_prompt'))
            );
            
            if (responseFiles.length === 0) {
                console.log(`No response files found for ${countryCode}`);
                continue;
            }
            
            // Process each response file
            for (const file of responseFiles) {
                const filePath = path.join(countryDir, file);
                console.log(`Processing ${filePath}...`);
                
                const result = await processCountryResponse(filePath);
                
                if (result) {
                    const { countryData, benefitData } = result;
                    
                    // Add to countries data
                    countriesData[countryCode] = countryData;
                    
                    // Add to benefits data
                    benefitsData[countryCode] = benefitData;
                    
                    processedCount++;
                } else {
                    errorCount++;
                }
            }
        }
        
        // Save the combined data
        await writeFile(
            path.join(OUTPUT_DIR, 'countries_processed.json'),
            JSON.stringify(countriesData, null, 2),
            'utf8'
        );
        
        await writeFile(
            path.join(OUTPUT_DIR, 'benefits_processed.json'),
            JSON.stringify(benefitsData, null, 2),
            'utf8'
        );
        
        console.log('\nProcessing complete!');
        console.log(`- Successfully processed: ${processedCount} files`);
        console.log(`- Errors: ${errorCount} files`);
        console.log(`\nOutput files saved to:`);
        console.log(`- ${path.join(OUTPUT_DIR, 'countries_processed.json')}`);
        console.log(`- ${path.join(OUTPUT_DIR, 'benefits_processed.json')}`);
        
    } catch (error) {
        console.error('Error processing responses:', error);
        process.exit(1);
    }
}

// Run the script
processAllResponses().catch(console.error);
